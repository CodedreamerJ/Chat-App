{"ast":null,"code":"var _jsxFileName = \"/Users/jameslloyd/Programming_Work_Folder/Chat-App/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string'; //Help us with retriving data from the URL\n\nimport io from 'socket.io-client';\nimport { send } from 'process'; //useEffect hook is used for the basic setup of users joining and disconnecting\n\nlet socket;\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = _ref => {\n  _s();\n\n  let {\n    location\n  } = _ref;\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); //Location comes from React Router providing us with a Prop = location. Using this we essentially get a URL back\n\n    socket = io(ENDPOINT, {\n      transports: ['websocket']\n    });\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, () => {}); //Return function used to disconnect from the useEffect hook. \n\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]); // function for sending messages\n\n  const sendMessage = event => {\n    event.preventDefault(); //This method prevents the browser from refresing which avoids other issues\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"M7DGl/NqV6luCY8IpJPKHYFo+ZU=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/jameslloyd/Programming_Work_Folder/Chat-App/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","send","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","transports","emit","off","on","sendMessage","event","preventDefault","console","log","users"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB,C,CAAwC;;AACxC,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,IAAT,QAAqB,SAArB,C,CAEA;;AACA,IAAIC,MAAJ;AAEA,OAAO,YAAP;;;AAEA,MAAMC,IAAI,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMgB,QAAQ,GAAG,gBAAjB;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEO,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBR,WAAW,CAACe,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAAvB,CADY,CAC+C;;AAE3Db,IAAAA,MAAM,GAAGF,EAAE,CAACa,QAAD,EAAW;AAAEG,MAAAA,UAAU,EAAG,CAAC,WAAD;AAAf,KAAX,CAAX;AAEAV,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACe,IAAP,CAAY,MAAZ,EAAoB;AAAEZ,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,MAAM,CAEzC,CAFD,EARY,CAWZ;;AACA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ;AAEAf,MAAAA,MAAM,CAACgB,GAAP;AACD,KAJD;AAKD,GAjBM,EAiBJ,CAACL,QAAD,EAAWT,QAAQ,CAACW,MAApB,CAjBI,CAAT;AAmBEjB,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACiB,EAAP,CAAU,SAAV,EAAsBV,OAAD,IAAa;AAChCG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACD,KAFD;AAGD,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT,CAzByB,CA+BzB;;AACA,QAAMS,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN,GAD6B,CACN;;AAEvB,QAAGb,OAAH,EAAY;AACVP,MAAAA,MAAM,CAACe,IAAP,CAAY,aAAZ,EAA2BR,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACD;AACF,GAND;;AAQAa,EAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ,EAAqBE,QAArB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEJ;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEI,QAApB;AAA8B,QAAA,IAAI,EAAEN;AAApC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEI,OAAhB;AAAyB,QAAA,UAAU,EAAEC,UAArC;AAAiD,QAAA,WAAW,EAAEU;AAA9D;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAMA,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEK;AAAtB;AAAA;AAAA;AAAA;AAAA,YANA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUL,CApDD;;GAAMtB,I;;KAAAA,I;AAsDN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string'; //Help us with retriving data from the URL\nimport io from 'socket.io-client';\nimport { send } from 'process';\n\n//useEffect hook is used for the basic setup of users joining and disconnecting\nlet socket;\n\nimport './Chat.css';\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState(''); \n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const ENDPOINT = 'localhost:5000';\n    useEffect(() => {\n        const { name, room } = queryString.parse(location.search); //Location comes from React Router providing us with a Prop = location. Using this we essentially get a URL back\n\n        socket = io(ENDPOINT, { transports : ['websocket'] });\n\n        setName(name);\n        setRoom(room);\n\n        socket.emit('join', { name, room }, () => {\n          \n        });\n        //Return function used to disconnect from the useEffect hook. \n        return () => {\n          socket.emit('disconnect');\n\n          socket.off();\n        }\n      }, [ENDPOINT, location.search]);\n\n      useEffect(() => {\n        socket.on('message', (message) => {\n          setMessages([...messages, message]);\n        })\n      }, [messages]);\n\n      // function for sending messages\n      const sendMessage = (event) => {\n        event.preventDefault();//This method prevents the browser from refresing which avoids other issues\n       \n        if(message) {\n          socket.emit('sendMessage', message, () => setMessage(''));\n        }\n      }\n\n      console.log(message, messages);\n\n      return ( \n        <div className=\"outerContainer\">\n        <div className=\"container\">\n            <InfoBar room={room} />\n            <Messages messages={messages} name={name} />\n            <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n        </div>\n        <TextContainer users={users}/>\n      </div>\n      )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}